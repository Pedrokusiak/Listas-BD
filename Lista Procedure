-- 01- Escreva quarto procedures de sintaxe - não precisa ter funcionalidade, basta não dar erro de sintaxe. Use variável global para testar.
-- - Faça uma declarando variáveis e com select into;

DELIMITER //
CREATE PROCEDURE verifica_preco_venda (id_produto INT)
BEGIN
    DECLARE preco DECIMAL(10,2);
    SELECT produto.preco_venda INTO preco FROM produto WHERE produto.id = id_produto;
END;
//
DELIMITER ;


-- Faça a segunda com uma estrutura de decisão; 

SET @ativo = 'O Registro está ativo';

DELIMITER //
CREATE PROCEDURE verifica_cliente_ativo (id_cliente INT)
BEGIN
    DECLARE ativo CHAR;
    SELECT cliente.ativo INTO ativo FROM cliente WHERE cliente.id = id_cliente;
    IF ativo = 'S' THEN
		BEGIN
			SELECT @ativo;
		END;
    END IF;
END;
//
DELIMITER ;

-- - Faça a terceira que gere erro, impedindo a ação;
DELIMITER //
CREATE PROCEDURE delete_cliente (id_cliente INT)
BEGIN
    DECLARE ativo CHAR;
    SELECT cliente.ativo INTO ativo FROM cliente WHERE cliente.id = id_cliente;
    IF ativo = 'S' THEN
		BEGIN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'CLIENTE ATIVO, NÃO PODE SER EXCLUÍDO';
		END;
	ELSE 
		BEGIN
			DELETE FROM cliente WHERE cliente.id = id_cliente;
		END;
    END IF;
    
END;
// DELIMITER ;

-- Faça a quarta com if e else. 
DELIMITER //
CREATE PROCEDURE insere_item_venda (id_produto INT)
BEGIN
    DECLARE estoque INT;
    SELECT produto.estoque INTO estoque FROM produto WHERE produto.id = id_produto;
    IF estoque>0 THEN
		BEGIN
			INSERT INTO ivenda(produto_id) VALUES (id_produto);
		END;
    ELSE
		BEGIN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ESTOQUE INSUFICIENTE';
        END;
    END IF;
END;
//
DELIMITER ;

-- 02 - Escreva uma procedure que registre a baixa de um produto e já atualize devidamente o estoque do produto. Antes das ações, verifique se o produto é ativo.
DELIMITER //
CREATE PROCEDURE insercao_baixa_produto(id_produto INT, id_funcionario INT, quantidade INT, descricao VARCHAR(100))
BEGIN
	DECLARE ativo CHAR;
    SELECT ativo FROM produto WHERE produto.id = id_produto;
    IF ativo = 'S' THEN
		BEGIN
			INSERT INTO BAIXA_PRODUTO (produto_id, id_funcionario, quantidade, descricao) VALUES 
			(id_produto, id_funcionario, quantidade, descricao);
			UPDATE produto SET estoque = (estoque - quantidade) WHERE produto.id = id_produto;
        END;
	ELSE 
		BEGIN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'PRODUTO INATIVO';
        END;
	END IF;
END;
//
DELIMITER ;

-- 03 - Escreva uma procedure que altere o preço de um produto vendido (venda já realizada - necessário verificar a existência da venda). Não permita altearções abusivas - preço de venda abaixo do preço de custo. É possível implementar esta funcionalidade sem a procedure? Se sim, indique como, bem como as vantagens e desvantagens.
DELIMITER //
CREATE PROCEDURE alterar_preco_produto(id_produto INT,id_venda INT, preco DECIMAL(10,2))
BEGIN
	DECLARE preco_custo DECIMAL(10,2);
    DECLARE venda_existe BOOL DEFAULT FALSE;
	SELECT preco_custo INTO preco_custo FROM produto WHERE produto.id = id_produto;
    SELECT (
		SELECT COUNT(*) 
        FROM venda 
        WHERE id = id_venda
	) = 1 INTO venda_existe;
    IF venda_existe THEN
		BEGIN
			IF preco > preco_custo THEN
				BEGIN
					UPDATE item_venda SET preco_unidade = preco WHERE item_venda.venda_id;
                END;
			ELSE
				BEGIN
					 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'NOVO PREÇO NÃO PODE SER ABAIXO DO PREÇO DE CUSTO';
                END;
			END IF;
        END;
	ELSE
		BEGIN
			 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'VENDA INEXISTENTE';
        END;
	END IF;
END;
//
DELIMITER ;


-- 04 - Escreva uma procedure que registre vendas de produtos e já defina o total da venda. É possível implementar a mesma funcionalidade por meio da trigger? Qual seria a diferença?
/* -- Sim, seria possível fazer por Trigger, a diferença seria que não seria mais necessário chamar a procedure, porém perderia-se a possibilidade de realizar a inserção sem passar 
pela trigger(a não ser que alguma condicional fosse estabelecida) */
DELIMITER // 
CREATE PROCEDURE inserir_venda_total(id_venda INT, id_produto INT, preco_unidade INT, quantidade INT)
BEGIN 
    DECLARE total_venda DECIMAL(10,2);
    SET total_venda = preco_unidade * quantidade;
	INSERT INTO ivenda(venda_id, produto_id, preco_unidade, quantidade) VALUES (id_venda, id_produto, preco_unidade, quantidade);
    UPDATE venda SET total = total + total_venda WHERE venda.id = id_venda;
END;
//
DELIMITER ;

-- 05 - Para o controle de salário de funcionários de uma empresa e os respectivos adiantamentos (vales):
-- - quais tabelas são necessárias?
-- Será necessário a tabela de funcionário, salário e adiantamentos.
/*
07- Explique as diferenças entre trigger, função e procedure. Indique as vantagens e desvantagens em utilizar a procedure.
*/
/* Vantagens da procedure: Melhor desempenho, ja que sao rapidas e eficazes são compiladas uma vez e armazenadas na forma de 
executável, melhorando o tempo de resposta e reduzindo os requisitos de memória. 
Tem uma maior produtividade ja que utilizam do mesmo trecho de codigo repedidamente.
Tem uma maior facilidade de uso ja que podem ser implementadas em qualquer camada.
Tem grande capacidade de manutenção ja que manter um procedimento em um servidor é muito mais fácil do que manter cópias em várias máquinas de clientes, porque os scripts estão em um local.*/
/* Desvantagens da procedure :
1 - Teste: Teste de uma lógica encapsulada dentro de um procedimento armazenado é muito mais difícil. Quaisquer erros de dados no tratamento de procedimentos armazenados não são gerados até o tempo de execução

2 - Depuração: Dependendo da tecnologia de banco de dados, depurar procedimentos armazenados será muito mais dificil ou impossível.

3 - Controle de versão: O controle de versão não é compatível com o procedimento armazenado.

4 - Custo: Um desenvolvedor extra na forma de DBA é necessário para acessar o SQL e escrever um procedimento armazenado melhor. Isso irá incorrer automaticamente em um custo adicional.

5 - Portabilidade - Procedimentos armazenados são complexos e nem sempre serão portados para versões atualizadas do mesmo banco de dados.
*/
